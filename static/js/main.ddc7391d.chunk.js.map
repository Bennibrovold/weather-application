{"version":3,"sources":["settings.js","helpers/request.js","App.jsx","reportWebVitals.js","index.js"],"names":["API_KEY","require","buildURLQuery","obj","Object","entries","map","pair","encodeURIComponent","join","request","url","data","headers","method","withCredentials","query","access_key","fetch","then","text","JSON","parse","catch","e","console","log","App","months","useState","city","setCity","setData","loading","setLoading","error","setError","submit","a","preventDefault","q","key","geodata","results","geometry","lat","lng","lon","exclude","appid","weather","cod","parseInt","code","message","className","onSubmit","type","placeholder","value","onChange","target","Date","current","dt","getDate","getMonth","Math","floor","temp","daily","item","day","min","max","morn","night","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddc7391d.chunk.js","sourcesContent":["const API_KEY = \"7ad7b9aee68c87d3af6c4ddaecc44c28\";\r\n\r\nexport {\r\n    API_KEY\r\n}","const { API_KEY } = require('../settings');\r\n\r\nconst buildURLQuery = obj =>\r\n      Object.entries(obj)\r\n            .map(pair => pair.map(encodeURIComponent).join('='))\r\n            .join('&');\r\n\r\nconst request = (url, data = null) => {\r\n\r\n    const headers = {\r\n        method: 'GET',\r\n        withCredentials: true\r\n    };\r\n\r\n    const query = buildURLQuery({...data, access_key: API_KEY });\r\n    return fetch(url + \"?\" + query, headers)\r\n        .then((data) => data.text())\r\n        .then((data) => JSON.parse(data))\r\n        .catch((e) => console.log(e));\r\n}\r\n\r\nexport { \r\n    request\r\n}","import { useEffect, useState } from \"react\";\nimport { request } from \"./helpers/request\";\nimport \"./style.scss\";\n\nfunction App() {\n  const months = [\n    \"Января\",\n    \"Февраля\",\n    \"Марта\",\n    \"Апреля\",\n    \"Мая\",\n    \"Июня\",\n    \"Июля\",\n    \"Августа\",\n    \"Сентября\",\n    \"Октября\",\n    \"Ноября\",\n    \"Декабря\",\n  ];\n  const [city, setCity] = useState(\"\");\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const submit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      let geodata = await request(\n        \"https://api.opencagedata.com/geocode/v1/json\",\n        {\n          q: city,\n          key: \"889baa4c721149b983ba7f71c7069dd0\",\n        }\n      );\n\n      const { lat, lng } = geodata.results[0].geometry;\n\n      let weather = await request(\n        \"https://api.openweathermap.org/data/2.5/onecall\",\n        {\n          lat: lat,\n          lon: lng,\n          exclude: \"hourly\",\n          appid: \"98b24feeab90f65b48dc62ee00cfa869\",\n        }\n      );\n\n      if (weather.cod === \"404\" || parseInt(weather.code) >= 400) {\n        setError(weather.message);\n        setData(false);\n        setLoading(false);\n\n        return;\n      }\n\n      if (weather) {\n        setError(null);\n        setData(weather);\n        setLoading(false);\n      }\n    } catch {}\n  };\n\n  const convertSunrise = (date) => {\n    let timeZone = new Date();\n\n    date = new Date(\n      (date + (timeZone.getTimezoneOffset() / 60) * 60 * 60) * 1000\n    );\n\n    return `${date.getHours()}:${\n      date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()\n    }`;\n  };\n\n  return (\n    <>\n      <div className=\"page\">\n        <div className=\"page__title\">Погода</div>\n        <div className=\"form-search\">\n          <form onSubmit={(e) => submit(e)}>\n            <input\n              className=\"form-search__input\"\n              type=\"text\"\n              placeholder=\"Москва\"\n              value={city}\n              onChange={(e) => setCity(e.target.value)}\n            />\n            <button className=\"form-search__submit\">\n              {loading ? <div className=\"spinner\"></div> : <span>Поиск</span>}\n            </button>\n          </form>\n        </div>\n        {error && <div className=\"error\">{error}</div>}\n        {data && (\n          <div className=\"city-weather\">\n            <div className=\"city-weather__today\">\n              <div className=\"city-weather__today-date\">\n                Cегодня{\" \"}\n                <span>{new Date(data.current.dt * 1000).getDate()}</span>{\" \"}\n                {months[new Date(data.current.dt * 1000).getMonth()]}\n              </div>\n              <div className=\"city-weather__today-temp\">\n                {Math.floor(data.current.temp - 273.15)}℃\n              </div>\n            </div>\n            <div className=\"city-weather__daily-cards\">\n              {data.daily\n                .map((item) => (\n                  <div className=\"city-weather__daily-card card\">\n                    <div className=\"card__top\">\n                      <div className=\"card__top-date\">\n                        <span>{new Date(item.dt * 1000).getDate()}</span>{\" \"}\n                        {months[new Date(item.dt * 1000).getMonth()]}\n                      </div>\n                      <div className=\"card__top-temp\">\n                        {Math.floor(item.temp.day - 273.15)}℃\n                      </div>\n                    </div>\n                    <div className=\"card__body\">\n                      <div className=\"card__body-item temp__min\">\n                        <span>Мин.</span>\n                        <span>{Math.floor(item.temp.min - 273.15)}℃</span>\n                      </div>\n                      <div className=\"card__body-item temp__min\">\n                        <span>Макс.</span>\n                        <span>{Math.floor(item.temp.max - 273.15)}℃</span>\n                      </div>\n                      <div className=\"card__body-item temp__min\">\n                        <span>Утро</span>\n                        <span>{Math.floor(item.temp.morn - 273.15)}℃</span>\n                      </div>\n                      <div className=\"card__body-item temp__min\">\n                        <span>Вечер</span>\n                        <span>{Math.floor(item.temp.night - 273.15)}℃</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n      <footer>\n        <span>HTML code author - </span>\n        <a href=\"https://github.com/bennibrovold\">bennibrovold</a>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}